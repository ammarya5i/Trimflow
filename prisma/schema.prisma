// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  onboardingCompleted Boolean @default(false)
  subscriptionStatus String? // 'active', 'canceled', 'past_due', 'unpaid'
  subscriptionPlan String? @default("FREE") // 'FREE', 'PRO', 'PREMIUM'
  stripeCustomerId String?
  stripeSubscriptionId String?
  subscriptionCurrentPeriodEnd DateTime?

  accounts Account[]
  sessions Session[]
  barbershops Barbershop[]
  staff Staff[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Barbershop {
  id            String   @id @default(cuid())
  ownerId       String
  name          String
  slug          String   @unique
  description   String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  phone         String?
  email         String?
  website       String?
  logoUrl       String?
  coverImageUrl String?
  timezone      String   @default("UTC")
  currency      String   @default("USD")
  language      String   @default("en")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  staff Staff[]
  services Service[]
  workingHours WorkingHours[]
  customers Customer[]
  appointments Appointment[]
}

model Staff {
  id          String   @id @default(cuid())
  barbershopId String
  userId      String?
  name        String
  email       String?
  phone       String?
  role        String   @default("barber") // 'admin', 'barber', 'reception'
  avatarUrl   String?
  bio         String?
  specialties String[] @default([])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  workingHours WorkingHours[]
  appointments Appointment[]
  staffServices StaffService[]
}

model Service {
  id          String   @id @default(cuid())
  barbershopId String
  name        String
  description String?
  duration    Int      // in minutes
  price       Int      // in cents
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  staffServices StaffService[]
}

model WorkingHours {
  id          String   @id @default(cuid())
  barbershopId String
  staffId     String?
  dayOfWeek   Int      // 0 = Sunday, 6 = Saturday
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  isWorking   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  staff Staff? @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([barbershopId, dayOfWeek, staffId])
}

model Customer {
  id          String   @id @default(cuid())
  barbershopId String
  name        String
  email       String?
  phone       String?
  dateOfBirth DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Appointment {
  id            String   @id @default(cuid())
  barbershopId  String
  customerId    String
  staffId       String
  serviceId     String
  startTime     DateTime
  endTime       DateTime
  duration      Int      // in minutes
  status        String   @default("scheduled") // 'scheduled', 'confirmed', 'in_progress', 'completed', 'cancelled', 'no_show'
  notes         String?
  totalPrice    Int      // in cents
  paymentStatus String   @default("pending") // 'pending', 'paid', 'refunded'
  paymentMethod String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model StaffService {
  id        String   @id @default(cuid())
  staffId   String
  serviceId String
  createdAt DateTime @default(now())

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([staffId, serviceId])
}
